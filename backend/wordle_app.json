{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":16205708794946593463,"abi":{"parameters":[{"name":"targetWord","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"},{"name":"feedback","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"public"},{"name":"userInput","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"public"}],"return_type":null,"error_types":{"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"ndzbTtxIEIDhd5lrLrqqq6uq8yqrKOIwiUZCgDistEK8+3oIA9LYxvr7Dod8GjTtkN9l97zubvZXL39+He5+3z/tfvzzuru9v758PtzfTUevu/L+R08Pl3fHo6fny8fn3Q9xudjt726mr7K8Xex+H273ux8ubz8vdkKBUlApMAoaBU5BUJAU9C3QzheuYCFYKBYVC8OiYeFYBBaLS66lfgjVei46FVqwECwUi4qFYdGwcCxiS+S5SCw6FbVgIVgoFhULw6Jhsbzm5ifhdi4Ci8SiU2EFC8FCsahYGBZtS5yvuTkWgUVi0aloBQvBQrGoWPB8w/3WcMA1XHANJ1zrVDjOdce97jjYHTec44Zz3HCOG85xw3ligbs9cLcH7vbADRe44QI3XOCGC9xwEVjgbg/c7Ym7PXHDJW64xA2XuOESN1w6FrjbE3d74m7vuOE6briOG67jhuu44XrDAnd7x93ecbd33HBSCifCiXJSOTFOGifOSXCCY04KrjkRPn0V4UQ5qZwYJ40T54RP5iQ54fNY5QNZHZjI8pGs8pms8qGs8qksH9GJBid8MKu48KQWToQT5aRyYpzgzpPqnAQnyQluPbHCiXCinFROcPCJNU6ck+AkOcHTWmmFE+FEOeHV13j1NV59jVdf49XXkhPe/M6b33nz8zGeOK++7UHenPDqc159Hpzw5nfe/MGbn8/zJHj1Ba++4NUXvPpi4GY8b/7gzR+8+flgT5JXX/LqS15928O9OWmc8OZP3vzJm59P+KTz6uu8+jqvvs6rrxsnvPk7b/7Om5+P+qTj6tNSOBFOlJPKiXHSOHFOcPVpSU5w9akUToQT5aRyYpw0TnD1qQQnyQmuPtXCCX/SVpWTyolxgqtP1TkJTpITXH1aCyfCiXJSOcHVp5U/i1n5w5g1OElO+DO4xh/CNf4UrvHHcPmsT804aZw4J/xZXOMP4xpufm2FE+GEV1/j1bc965sTXn2NV18LTpIT3vzOm5/P+tR59TmvPufV57z63Dnhze+8+Z03P5/1afDqC159watve9Y3J40T3vzBmz948/NZnyavvuTVl7z6kldfGie8+ZM3f/Lm57M+TV59nVdf59XXefV1vvtqe9Y3J7z5O29+PuvTPrAFa2APFt+EVfgurMK3YRW+D6sYJ3wnFp/11cL3YhW+Gavg6qtSOBFOlJPKiXGCq6+KcxKcJCe4+qoWToQT5aRysrj6FuWDWO8z0jhxToKT5KRjsjzr+54IJ8pJ5YSvfuWrX/nqV776la9+5atvfPWNr77x1Te++sZX3/jqG19946u/POsLiQ8SOftfbHnWl5ofJH32Ksuzvu+JcKKcVE6Mkeng6vFwe3v48+v8A2ZeV3bAfff6id/KxO9k4jcy8fuYhkXDwrEILBILvOYdr/nylZmUdvpVMH0pZ2ZlN5SYfiKrc2Qjr7Q8AinePtHs987KBqctFCMoR1AfQCsbnTaQjCDdRn2G6sAZsfLggBY9oel69xyt3NSfbvZ/Io0ZGjlhV265T2O5z1fqswehVm66b6AYQTmC+gBaufm+gWQELa9T/TojpqvpGaojyEZQG0E+gmIE5QjaPCMW0HLYbqGVd6/6J7LZv1zzERQjKEdQH0DLkbuFZATpJmo6Q20EraxTfJ0Rfb5ZJkZQjqA+gFY+K2YDyQjSEVRHkI2gNoJGzggfOSN85IxY2XjyfRKs3I7eQDKCRoolRips5bb0BmojyEdQjKAcQSNnROIz4m06+vfy8XB5dbs/Xt8fv/lyd3263J8On/97OH3nNBB4eLy/3t+8PO6Po4GvqcDxxaXHhUr+/Puxr+4X4e9XGcdvZV5Ir++t/f43bTr06SeYfor/AQ==","file_map":{"61":{"source":"fn main(targetWord: [Field;6], feedback: pub [Field;6], userInput: pub [Field;6]) {\n\n    // check if all the inputs are valid\n    for i in 0..6 {\n        assert(userInput[i] as i32 < 26);\n        assert(targetWord[i] as i32 < 26);\n        assert(feedback[i] as i32 < 3);\n    }\n    \n    // For computed feedback - 2 is green, 1 is yellow, 0 is gray\n    let mut usedWord: [Field;6] = [0;6];\n    let mut computedFeedback: [Field;6] = [0;6];\n\n    for i in 0..6 {\n        if targetWord[i] == userInput[i] {\n            computedFeedback[i] = 2;\n            usedWord[i] = 1;\n        }\n    }\n\n    // Safety: We are using unsafe to mutate the computedFeedback array.\n    let final_computed_feedback: [Field;6] = unsafe {\n     compute_feedback(targetWord, usedWord, computedFeedback, userInput)\n    };\n\n    for i in 0..6 {\n        assert(final_computed_feedback[i] == feedback[i]);\n    }\n\n}\n\nunconstrained fn compute_feedback(targetWord: [Field;6], mut usedWord: [Field;6], mut computedFeedback: [Field;6], userInput: [Field;6]) -> [Field;6] {\n    for i in 0..6 {\n        if computedFeedback[i] == 2 {\n            // already found. continue to next iteration\n            continue;\n        }\n\n        for j in 0..6 {\n            if i == j {\n                continue;\n            }\n            if targetWord[j] == userInput[i] {\n                if usedWord[j] == 0 {\n                    computedFeedback[i] = 1;\n                    usedWord[j] = 1;\n                }\n                break;\n            }\n        }\n    }\n    computedFeedback\n}\n\n#[test]\nfn test_main() {\n    main([15, 20, 25, 25, 11, 4], [1, 2, 0, 0, 2, 2], [25, 20, 17, 3, 11, 4]);\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/jayakrishnanashok/Documents/personal/random-projects/noir-apps/wordle_app/src/main.nr"}},"names":["main"],"brillig_names":["compute_feedback","directive_integer_quotient","directive_invert"]}